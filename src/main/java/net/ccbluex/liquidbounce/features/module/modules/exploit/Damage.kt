
package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.LiquidBounce
import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.value.FloatValue
import net.ccbluex.liquidbounce.value.IntegerValue
import net.ccbluex.liquidbounce.value.ListValue
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.server.S19PacketEntityStatus

@ModuleInfo(name = "Damage", category = ModuleCategory.EXPLOIT, canEnable = false)
class Damage : Module() {

    private val modeValue = ListValue("Mode", arrayOf("Fake","NCP","AAC","Verus"), "NCP")
    private val verusMode = ListValue("VerusMode", arrayOf("Damage1","Damage2","Damage3","Damage4","CustomDamage"), "Damage1").displayable {modeValue.equals("Verus")}
    private val ncpMode = ListValue("NCPMode", arrayOf("Glitch","JumpPacket"), "Glitch").displayable {modeValue.equals("NCP")}
    private val packet1 = FloatValue("CustomDamage-Packet1Clip", 4f,0f,5f).displayable { modeValue.equals("Verus") && verusMode.equals("CustomDamage") }
    private val packet2 = FloatValue("CustomDamage-Packet2Clip", -0.2f,-1f,5f).displayable { modeValue.equals("Verus") && verusMode.equals("CustomDamage") }
    private val packet3 = FloatValue("CustomDamage-Packet3Clip", 0.5f,0f,5f).displayable { modeValue.equals("Verus") && verusMode.equals("CustomDamage") }
    private val damageValue = IntegerValue("Damage", 1, 1, 20)
    private val onlyGround = BoolValue("OnlyGround",true)
    private val jumpYPosArr = arrayOf(0.41999998688698, 0.7531999805212, 1.00133597911214, 1.16610926093821, 1.24918707874468, 1.24918707874468, 1.1707870772188, 1.0155550727022, 0.78502770378924, 0.4807108763317, 0.10408037809304, 0.0)

    override fun onEnable() {
        if (onlyGround.get() && !mc.thePlayer.onGround) {
            return
        }

        when (modeValue.get().toLowerCase()) {
            "fake" -> {


            }

            "ncp" -> {
                when (ncpMode.get().lowercase()) {
                    "glitch" -> {
                        val x = mc.thePlayer.posX
                        val y = mc.thePlayer.posY
                        val z = mc.thePlayer.posZ

                        repeat((55 + damageValue.get() * 10.204).toInt()) {
                            mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y + 0.049, z, false))
                            mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y, z, false))
                        }
                        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(x, y, z, true))
                    }
                    "jumppacket" -> {
                        var x = mc.thePlayer.posX
                        var y = mc.thePlayer.posY
                        var z = mc.thePlayer.posZ
                        repeat(4) {
                            jumpYPosArr.forEach {
                                PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(x, y + it, z, false))
                            }
                            PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(x, y, z, false))
                        }
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(x, y, z, true))
                    }
                }
            }
            "aac" -> mc.thePlayer.motionY = 4 + damageValue.get().toDouble()
            "verus" -> {
                when (verusMode.get().lowercase()) {
                    "damage1" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.05, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.41999998688697815, mc.thePlayer.posZ, true))
                    }
                    "damage2" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.35, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                    }
                    "damage3" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 4, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                    }
                    "damage4" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 3.42, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
                    }
                    "customdamage" -> {
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + packet1.get().toDouble(), mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + packet2.get().toDouble(), mc.thePlayer.posZ, false))
                        PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + packet3.get().toDouble(), mc.thePlayer.posZ, true))
                    }
                }
            }
        }
    }

}
