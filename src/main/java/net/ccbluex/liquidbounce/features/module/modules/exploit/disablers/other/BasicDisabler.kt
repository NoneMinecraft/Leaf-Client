package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.value.BoolValue
import net.ccbluex.liquidbounce.utils.MovementUtils
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C0APacketAnimation
import net.minecraft.network.play.client.C0BPacketEntityAction
import net.minecraft.network.play.client.C07PacketPlayerDigging
import net.minecraft.network.play.client.C13PacketPlayerAbilities
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C03PacketPlayer.*
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement
import net.minecraft.network.play.client.C09PacketHeldItemChange
import net.minecraft.network.play.server.S02PacketChat
import net.minecraft.network.play.server.S12PacketEntityVelocity
import net.minecraft.network.play.server.S45PacketTitle


class BasicDisabler : DisablerMode("Basic") {
    private val cancelC00Value = BoolValue("${valuePrefix}CancelC00", true)
    private val cancelC0FValue = BoolValue("${valuePrefix}CancelC0F", true)
    private val cancelC0AValue = BoolValue("${valuePrefix}CancelC0A", true)
    private val cancelC0BValue = BoolValue("${valuePrefix}CancelC0B", true)
    private val cancelC07Value = BoolValue("${valuePrefix}CancelC07", true)
    private val cancelC13Value = BoolValue("${valuePrefix}CancelC13", true)
    private val cancelC09Value = BoolValue("${valuePrefix}CancelC09", true)
    private val cancelC08Value = BoolValue("${valuePrefix}CancelC08", true)
    private val cancelC06Value = BoolValue("${valuePrefix}CancelC06", true)
    private val cancelS12Value = BoolValue("${valuePrefix}CancelS12", true)
    private val cancelS45Value = BoolValue("${valuePrefix}CancelS45", true)
    private val cancelS02Value = BoolValue("${valuePrefix}CancelS02", true)


    private val cancelC03Value = BoolValue("${valuePrefix}CancelC03", true)
    private val c03NoMoveValue = BoolValue("${valuePrefix}C03-NoMove", true).displayable { cancelC03Value.get() }
    
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C00PacketKeepAlive && cancelC00Value.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C00-KeepAlive")
        }
        if (packet is S12PacketEntityVelocity && cancelS12Value.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C00-KeepAlive")
        }
        if (packet is S45PacketTitle && cancelS45Value.get()) {
            event.cancelEvent()
            disabler.debugMessage("Cancel C00-KeepAlive")
        }
        if (packet is S02PacketChat && cancelS02Value.get()) {
            event.cancelEvent()
        }

        if (packet is C09PacketHeldItemChange && cancelC09Value.get()) {
            event.cancelEvent()
        }
        if (packet is C08PacketPlayerBlockPlacement && cancelC08Value.get()) {
            event.cancelEvent()
        }
        if (packet is C06PacketPlayerPosLook && cancelC06Value.get()) {
            event.cancelEvent()
        }
        if (packet is C0FPacketConfirmTransaction && cancelC0FValue.get()) {
            event.cancelEvent()
        }
        if (packet is C0APacketAnimation && cancelC0AValue.get()) {
            event.cancelEvent()
        }
        if (packet is C0BPacketEntityAction && cancelC0BValue.get()) {
            event.cancelEvent()
        }
        if (packet is C07PacketPlayerDigging && cancelC07Value.get()) {
            event.cancelEvent()
        }
        if (packet is C13PacketPlayerAbilities && cancelC13Value.get()) {
            event.cancelEvent()
        }
        if (packet is C03PacketPlayer && !(packet is C04PacketPlayerPosition || packet is C05PacketPlayerLook || packet is C06PacketPlayerPosLook) && cancelC03Value.get()) {
            if (c03NoMoveValue.get() && MovementUtils.isMoving())
                return
            event.cancelEvent()
        }
    }
}
