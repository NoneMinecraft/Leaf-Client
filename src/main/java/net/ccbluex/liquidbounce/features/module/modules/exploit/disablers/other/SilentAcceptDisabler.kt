
package net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.other

import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disablers.DisablerMode
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import java.util.*
import kotlin.math.round
import kotlin.math.sqrt
class SilentAcceptDisabler  : DisablerMode("Silent-Accept") {

    private fun isInventory(action: Short): Boolean = action in 1..99
    private val packetQueue = LinkedList<C0FPacketConfirmTransaction>()
    override fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (packet is C03PacketPlayer) {
            val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
            mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

            if (mc.thePlayer.ticksExisted % 45 == 0) {
                disabler.debugMessage("flag")
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        true
                    )
                )
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY - 11.725,
                        mc.thePlayer.posZ,
                        false
                    )
                )
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C04PacketPlayerPosition(
                        mc.thePlayer.posX,
                        mc.thePlayer.posY,
                        mc.thePlayer.posZ,
                        true
                    )
                )
            }
        }

        if (packet is S08PacketPlayerPosLook) {
            if (mc.thePlayer == null || mc.thePlayer.ticksExisted <= 0) return

            val x = packet.getX() - mc.thePlayer.posX
            val y = packet.getY() - mc.thePlayer.posY
            val z = packet.getZ() - mc.thePlayer.posZ
            val diff = sqrt(x * x + y * y + z * z)
            if (diff <= 8) {
                event.cancelEvent()
                PacketUtils.sendPacketNoEvent(
                    C03PacketPlayer.C06PacketPlayerPosLook(
                        packet.getX(),
                        packet.getY(),
                        packet.getZ(),
                        packet.getYaw(),
                        packet.getPitch(),
                        true
                    )
                )

                disabler.debugMessage("silent s08 accept")
            }
        }

        if (packet is C0FPacketConfirmTransaction && !isInventory(packet.uid)) {
            repeat(4) {
                packetQueue.add(packet)
            }
            event.cancelEvent()
            disabler.debugMessage("c0f dupe: 4x")
        }
    }

    override fun onDisable() {
        packetQueue.clear()
    }

}